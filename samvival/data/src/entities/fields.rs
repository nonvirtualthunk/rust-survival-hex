use *;
use game::prelude::*;
use enum_map::EnumMap;
use common::reflect::*;
use common::hex::*;
use common::Color;
use common::prelude::*;
use entities::actions::*;
use entities::reactions::*;
use entities::*;
use game::ModifierReference;
use std::collections::HashSet;
use std::collections::HashMap;

impl GraphicsData { pub const graphical_position : Field < GraphicsData , Option < CartVec > > = Field :: new ( stringify ! ( graphical_position ) , | t | & t . graphical_position , | t | & mut t . graphical_position , | t , v | { t . graphical_position = v ; } ) ; pub const color : Field < GraphicsData , Color > = Field :: new ( stringify ! ( color ) , | t | & t . color , | t | & mut t . color , | t , v | { t . color = v ; } ) ; }
impl CharacterData { pub const health : Field < CharacterData , Reduceable < i32 > > = Field :: new ( stringify ! ( health ) , | t | & t . health , | t | & mut t . health , | t , v | { t . health = v ; } ) ; pub const action_points : Field < CharacterData , Reduceable < i32 > > = Field :: new ( stringify ! ( action_points ) , | t | & t . action_points , | t | & mut t . action_points , | t , v | { t . action_points = v ; } ) ; pub const stamina : Field < CharacterData , Reduceable < Sext > > = Field :: new ( stringify ! ( stamina ) , | t | & t . stamina , | t | & mut t . stamina , | t , v | { t . stamina = v ; } ) ; pub const stamina_recovery : Field < CharacterData , Sext > = Field :: new ( stringify ! ( stamina_recovery ) , | t | & t . stamina_recovery , | t | & mut t . stamina_recovery , | t , v | { t . stamina_recovery = v ; } ) ; pub const sprite : Field < CharacterData , String > = Field :: new ( stringify ! ( sprite ) , | t | & t . sprite , | t | & mut t . sprite , | t , v | { t . sprite = v ; } ) ; pub const name : Field < CharacterData , String > = Field :: new ( stringify ! ( name ) , | t | & t . name , | t | & mut t . name , | t , v | { t . name = v ; } ) ; }
impl ObserverData { pub const vision_range : Field < ObserverData , i32 > = Field :: new ( stringify ! ( vision_range ) , | t | & t . vision_range , | t | & mut t . vision_range , | t , v | { t . vision_range = v ; } ) ; pub const low_light_vision_range : Field < ObserverData , i32 > = Field :: new ( stringify ! ( low_light_vision_range ) , | t | & t . low_light_vision_range , | t | & mut t . low_light_vision_range , | t , v | { t . low_light_vision_range = v ; } ) ; pub const dark_vision_range : Field < ObserverData , i32 > = Field :: new ( stringify ! ( dark_vision_range ) , | t | & t . dark_vision_range , | t | & mut t . dark_vision_range , | t , v | { t . dark_vision_range = v ; } ) ; }
impl AllegianceData { pub const faction : Field < AllegianceData , Entity > = Field :: new ( stringify ! ( faction ) , | t | & t . faction , | t | & mut t . faction , | t , v | { t . faction = v ; } ) ; }
impl DerivedAttackData { pub const weapon_condition : Field < DerivedAttackData , EntitySelectors > = Field :: new ( stringify ! ( weapon_condition ) , | t | & t . weapon_condition , | t | & mut t . weapon_condition , | t , v | { t . weapon_condition = v ; } ) ; pub const character_condition : Field < DerivedAttackData , EntitySelectors > = Field :: new ( stringify ! ( character_condition ) , | t | & t . character_condition , | t | & mut t . character_condition , | t , v | { t . character_condition = v ; } ) ; pub const attack_condition : Field < DerivedAttackData , EntitySelectors > = Field :: new ( stringify ! ( attack_condition ) , | t | & t . attack_condition , | t | & mut t . attack_condition , | t , v | { t . attack_condition = v ; } ) ; pub const kind : Field < DerivedAttackData , DerivedAttackKind > = Field :: new ( stringify ! ( kind ) , | t | & t . kind , | t | & mut t . kind , | t , v | { t . kind = v ; } ) ; }
impl CombatData { pub const active_attack : Field < CombatData , AttackRef > = Field :: new ( stringify ! ( active_attack ) , | t | & t . active_attack , | t | & mut t . active_attack , | t , v | { t . active_attack = v ; } ) ; pub const active_counterattack : Field < CombatData , AttackRef > = Field :: new ( stringify ! ( active_counterattack ) , | t | & t . active_counterattack , | t | & mut t . active_counterattack , | t , v | { t . active_counterattack = v ; } ) ; pub const natural_attacks : Field < CombatData , Vec < Entity > > = Field :: new ( stringify ! ( natural_attacks ) , | t | & t . natural_attacks , | t | & mut t . natural_attacks , | t , v | { t . natural_attacks = v ; } ) ; pub const counters_remaining : Field < CombatData , Reduceable < i32 > > = Field :: new ( stringify ! ( counters_remaining ) , | t | & t . counters_remaining , | t | & mut t . counters_remaining , | t , v | { t . counters_remaining = v ; } ) ; pub const counters_per_event : Field < CombatData , i32 > = Field :: new ( stringify ! ( counters_per_event ) , | t | & t . counters_per_event , | t | & mut t . counters_per_event , | t , v | { t . counters_per_event = v ; } ) ; pub const melee_accuracy_bonus : Field < CombatData , i32 > = Field :: new ( stringify ! ( melee_accuracy_bonus ) , | t | & t . melee_accuracy_bonus , | t | & mut t . melee_accuracy_bonus , | t , v | { t . melee_accuracy_bonus = v ; } ) ; pub const ranged_accuracy_bonus : Field < CombatData , i32 > = Field :: new ( stringify ! ( ranged_accuracy_bonus ) , | t | & t . ranged_accuracy_bonus , | t | & mut t . ranged_accuracy_bonus , | t , v | { t . ranged_accuracy_bonus = v ; } ) ; pub const melee_damage_bonus : Field < CombatData , i32 > = Field :: new ( stringify ! ( melee_damage_bonus ) , | t | & t . melee_damage_bonus , | t | & mut t . melee_damage_bonus , | t , v | { t . melee_damage_bonus = v ; } ) ; pub const ranged_damage_bonus : Field < CombatData , i32 > = Field :: new ( stringify ! ( ranged_damage_bonus ) , | t | & t . ranged_damage_bonus , | t | & mut t . ranged_damage_bonus , | t , v | { t . ranged_damage_bonus = v ; } ) ; pub const dodge_bonus : Field < CombatData , i32 > = Field :: new ( stringify ! ( dodge_bonus ) , | t | & t . dodge_bonus , | t | & mut t . dodge_bonus , | t , v | { t . dodge_bonus = v ; } ) ; pub const defense_bonus : Field < CombatData , i32 > = Field :: new ( stringify ! ( defense_bonus ) , | t | & t . defense_bonus , | t | & mut t . defense_bonus , | t , v | { t . defense_bonus = v ; } ) ; pub const block_bonus : Field < CombatData , i32 > = Field :: new ( stringify ! ( block_bonus ) , | t | & t . block_bonus , | t | & mut t . block_bonus , | t , v | { t . block_bonus = v ; } ) ; pub const special_attacks : Field < CombatData , Vec < Entity > > = Field :: new ( stringify ! ( special_attacks ) , | t | & t . special_attacks , | t | & mut t . special_attacks , | t , v | { t . special_attacks = v ; } ) ; }
impl Attack { pub const name : Field < Attack , String > = Field :: new ( stringify ! ( name ) , | t | & t . name , | t | & mut t . name , | t , v | { t . name = v ; } ) ; pub const verb : Field < Attack , Option < String > > = Field :: new ( stringify ! ( verb ) , | t | & t . verb , | t | & mut t . verb , | t , v | { t . verb = v ; } ) ; pub const attack_type : Field < Attack , AttackType > = Field :: new ( stringify ! ( attack_type ) , | t | & t . attack_type , | t | & mut t . attack_type , | t , v | { t . attack_type = v ; } ) ; pub const ap_cost : Field < Attack , u32 > = Field :: new ( stringify ! ( ap_cost ) , | t | & t . ap_cost , | t | & mut t . ap_cost , | t , v | { t . ap_cost = v ; } ) ; pub const damage_dice : Field < Attack , DicePool > = Field :: new ( stringify ! ( damage_dice ) , | t | & t . damage_dice , | t | & mut t . damage_dice , | t , v | { t . damage_dice = v ; } ) ; pub const damage_bonus : Field < Attack , i32 > = Field :: new ( stringify ! ( damage_bonus ) , | t | & t . damage_bonus , | t | & mut t . damage_bonus , | t , v | { t . damage_bonus = v ; } ) ; pub const to_hit_bonus : Field < Attack , i32 > = Field :: new ( stringify ! ( to_hit_bonus ) , | t | & t . to_hit_bonus , | t | & mut t . to_hit_bonus , | t , v | { t . to_hit_bonus = v ; } ) ; pub const primary_damage_type : Field < Attack , DamageType > = Field :: new ( stringify ! ( primary_damage_type ) , | t | & t . primary_damage_type , | t | & mut t . primary_damage_type , | t , v | { t . primary_damage_type = v ; } ) ; pub const secondary_damage_type : Field < Attack , Option < DamageType > > = Field :: new ( stringify ! ( secondary_damage_type ) , | t | & t . secondary_damage_type , | t | & mut t . secondary_damage_type , | t , v | { t . secondary_damage_type = v ; } ) ; pub const range : Field < Attack , u32 > = Field :: new ( stringify ! ( range ) , | t | & t . range , | t | & mut t . range , | t , v | { t . range = v ; } ) ; pub const min_range : Field < Attack , u32 > = Field :: new ( stringify ! ( min_range ) , | t | & t . min_range , | t | & mut t . min_range , | t , v | { t . min_range = v ; } ) ; pub const ammunition_kind : Field < Attack , Option < Taxon > > = Field :: new ( stringify ! ( ammunition_kind ) , | t | & t . ammunition_kind , | t | & mut t . ammunition_kind , | t , v | { t . ammunition_kind = v ; } ) ; pub const stamina_cost : Field < Attack , u32 > = Field :: new ( stringify ! ( stamina_cost ) , | t | & t . stamina_cost , | t | & mut t . stamina_cost , | t , v | { t . stamina_cost = v ; } ) ; pub const pattern : Field < Attack , HexPattern > = Field :: new ( stringify ! ( pattern ) , | t | & t . pattern , | t | & mut t . pattern , | t , v | { t . pattern = v ; } ) ; }
impl FactionData { pub const name : Field < FactionData , String > = Field :: new ( stringify ! ( name ) , | t | & t . name , | t | & mut t . name , | t , v | { t . name = v ; } ) ; pub const color : Field < FactionData , Color > = Field :: new ( stringify ! ( color ) , | t | & t . color , | t | & mut t . color , | t , v | { t . color = v ; } ) ; pub const player_faction : Field < FactionData , bool > = Field :: new ( stringify ! ( player_faction ) , | t | & t . player_faction , | t | & mut t . player_faction , | t , v | { t . player_faction = v ; } ) ; }
impl EquipmentData { pub const equipped : Field < EquipmentData , Vec < Entity > > = Field :: new ( stringify ! ( equipped ) , | t | & t . equipped , | t | & mut t . equipped , | t , v | { t . equipped = v ; } ) ; }
impl InventoryData { pub const items : Field < InventoryData , Vec < Entity > > = Field :: new ( stringify ! ( items ) , | t | & t . items , | t | & mut t . items , | t , v | { t . items = v ; } ) ; pub const inventory_size : Field < InventoryData , Option < u32 > > = Field :: new ( stringify ! ( inventory_size ) , | t | & t . inventory_size , | t | & mut t . inventory_size , | t , v | { t . inventory_size = v ; } ) ; }
impl ItemData { pub const attacks : Field < ItemData , Vec < Entity > > = Field :: new ( stringify ! ( attacks ) , | t | & t . attacks , | t | & mut t . attacks , | t , v | { t . attacks = v ; } ) ; pub const in_inventory_of : Field < ItemData , Option < Entity > > = Field :: new ( stringify ! ( in_inventory_of ) , | t | & t . in_inventory_of , | t | & mut t . in_inventory_of , | t , v | { t . in_inventory_of = v ; } ) ; }
impl MapData { pub const min_tile_bound : Field < MapData , AxialCoord > = Field :: new ( stringify ! ( min_tile_bound ) , | t | & t . min_tile_bound , | t | & mut t . min_tile_bound , | t , v | { t . min_tile_bound = v ; } ) ; pub const max_tile_bound : Field < MapData , AxialCoord > = Field :: new ( stringify ! ( max_tile_bound ) , | t | & t . max_tile_bound , | t | & mut t . max_tile_bound , | t , v | { t . max_tile_bound = v ; } ) ; }
impl SkillData { pub const skill_bonuses : Field < SkillData , HashMap < Skill , i32 > > = Field :: new ( stringify ! ( skill_bonuses ) , | t | & t . skill_bonuses , | t | & mut t . skill_bonuses , | t , v | { t . skill_bonuses = v ; } ) ; pub const skill_xp : Field < SkillData , HashMap < Skill , i32 > > = Field :: new ( stringify ! ( skill_xp ) , | t | & t . skill_xp , | t | & mut t . skill_xp , | t , v | { t . skill_xp = v ; } ) ; }
impl TileData { pub const main_terrain_name : Field < TileData , String > = Field :: new ( stringify ! ( main_terrain_name ) , | t | & t . main_terrain_name , | t | & mut t . main_terrain_name , | t , v | { t . main_terrain_name = v ; } ) ; pub const secondary_terrain_name : Field < TileData , Option < String > > = Field :: new ( stringify ! ( secondary_terrain_name ) , | t | & t . secondary_terrain_name , | t | & mut t . secondary_terrain_name , | t , v | { t . secondary_terrain_name = v ; } ) ; pub const position : Field < TileData , AxialCoord > = Field :: new ( stringify ! ( position ) , | t | & t . position , | t | & mut t . position , | t , v | { t . position = v ; } ) ; pub const move_cost : Field < TileData , Sext > = Field :: new ( stringify ! ( move_cost ) , | t | & t . move_cost , | t | & mut t . move_cost , | t , v | { t . move_cost = v ; } ) ; pub const cover : Field < TileData , i8 > = Field :: new ( stringify ! ( cover ) , | t | & t . cover , | t | & mut t . cover , | t , v | { t . cover = v ; } ) ; pub const occupied_by : Field < TileData , Option < Entity > > = Field :: new ( stringify ! ( occupied_by ) , | t | & t . occupied_by , | t | & mut t . occupied_by , | t , v | { t . occupied_by = v ; } ) ; pub const elevation : Field < TileData , i8 > = Field :: new ( stringify ! ( elevation ) , | t | & t . elevation , | t | & mut t . elevation , | t , v | { t . elevation = v ; } ) ; }
impl Resources { pub const main : Field < Resources , ConstantResources > = Field :: new ( stringify ! ( main ) , | t | & t . main , | t | & mut t . main , | t , v | { t . main = v ; } ) ; pub const custom_resources : Field < Resources , HashMap < String , Entity > > = Field :: new ( stringify ! ( custom_resources ) , | t | & t . custom_resources , | t | & mut t . custom_resources , | t , v | { t . custom_resources = v ; } ) ; }
impl FoodInfo { pub const satiation : Field < FoodInfo , i32 > = Field :: new ( stringify ! ( satiation ) , | t | & t . satiation , | t | & mut t . satiation , | t , v | { t . satiation = v ; } ) ; }
impl Material { pub const edge : Field < Material , i32 > = Field :: new ( stringify ! ( edge ) , | t | & t . edge , | t | & mut t . edge , | t , v | { t . edge = v ; } ) ; pub const hardness : Field < Material , i32 > = Field :: new ( stringify ! ( hardness ) , | t | & t . hardness , | t | & mut t . hardness , | t , v | { t . hardness = v ; } ) ; pub const flammable : Field < Material , bool > = Field :: new ( stringify ! ( flammable ) , | t | & t . flammable , | t | & mut t . flammable , | t , v | { t . flammable = v ; } ) ; pub const density : Field < Material , i32 > = Field :: new ( stringify ! ( density ) , | t | & t . density , | t | & mut t . density , | t , v | { t . density = v ; } ) ; pub const ductile : Field < Material , bool > = Field :: new ( stringify ! ( ductile ) , | t | & t . ductile , | t | & mut t . ductile , | t , v | { t . ductile = v ; } ) ; pub const cordable : Field < Material , bool > = Field :: new ( stringify ! ( cordable ) , | t | & t . cordable , | t | & mut t . cordable , | t , v | { t . cordable = v ; } ) ; pub const magnetic : Field < Material , bool > = Field :: new ( stringify ! ( magnetic ) , | t | & t . magnetic , | t | & mut t . magnetic , | t , v | { t . magnetic = v ; } ) ; pub const stack_size : Field < Material , i32 > = Field :: new ( stringify ! ( stack_size ) , | t | & t . stack_size , | t | & mut t . stack_size , | t , v | { t . stack_size = v ; } ) ; }
impl TurnData { pub const turn_number : Field < TurnData , u32 > = Field :: new ( stringify ! ( turn_number ) , | t | & t . turn_number , | t | & mut t . turn_number , | t , v | { t . turn_number = v ; } ) ; pub const active_faction : Field < TurnData , Entity > = Field :: new ( stringify ! ( active_faction ) , | t | & t . active_faction , | t | & mut t . active_faction , | t , v | { t . active_faction = v ; } ) ; }
impl TimeData { pub const moments_since_world_start : Field < TimeData , u32 > = Field :: new ( stringify ! ( moments_since_world_start ) , | t | & t . moments_since_world_start , | t | & mut t . moments_since_world_start , | t , v | { t . moments_since_world_start = v ; } ) ; pub const moments_by_time_of_day : Field < TimeData , HashMap < TimeOfDay , u32 > > = Field :: new ( stringify ! ( moments_by_time_of_day ) , | t | & t . moments_by_time_of_day , | t | & mut t . moments_by_time_of_day , | t , v | { t . moments_by_time_of_day = v ; } ) ; pub const moments_since_day_start : Field < TimeData , u32 > = Field :: new ( stringify ! ( moments_since_day_start ) , | t | & t . moments_since_day_start , | t | & mut t . moments_since_day_start , | t , v | { t . moments_since_day_start = v ; } ) ; }
impl PositionData { pub const hex : Field < PositionData , AxialCoord > = Field :: new ( stringify ! ( hex ) , | t | & t . hex , | t | & mut t . hex , | t , v | { t . hex = v ; } ) ; }
impl IdentityData { pub const name : Field < IdentityData , Option < String > > = Field :: new ( stringify ! ( name ) , | t | & t . name , | t | & mut t . name , | t , v | { t . name = v ; } ) ; pub const kinds : Field < IdentityData , Vec < Taxon > > = Field :: new ( stringify ! ( kinds ) , | t | & t . kinds , | t | & mut t . kinds , | t , v | { t . kinds = v ; } ) ; }
impl ActionData { pub const active_action : Field < ActionData , Option < Action > > = Field :: new ( stringify ! ( active_action ) , | t | & t . active_action , | t | & mut t . active_action , | t , v | { t . active_action = v ; } ) ; pub const active_reaction : Field < ActionData , ReactionTypeRef > = Field :: new ( stringify ! ( active_reaction ) , | t | & t . active_reaction , | t | & mut t . active_reaction , | t , v | { t . active_reaction = v ; } ) ; }
impl ModifierTrackingData { pub const modifiers_by_key : Field < ModifierTrackingData , HashMap < String , ModifierReference > > = Field :: new ( stringify ! ( modifiers_by_key ) , | t | & t . modifiers_by_key , | t | & mut t . modifiers_by_key , | t , v | { t . modifiers_by_key = v ; } ) ; }
impl AttributeData { }
impl MonsterSpawnerData { pub const spawns : Field < MonsterSpawnerData , Vec < Spawn > > = Field :: new ( stringify ! ( spawns ) , | t | & t . spawns , | t | & mut t . spawns , | t , v | { t . spawns = v ; } ) ; }
impl VisibilityData { pub const visibility_by_faction : Field < VisibilityData , HashMap < Entity , Visibility > > = Field :: new ( stringify ! ( visibility_by_faction ) , | t | & t . visibility_by_faction , | t | & mut t . visibility_by_faction , | t , v | { t . visibility_by_faction = v ; } ) ; }
impl MovementType { pub const name : Field < MovementType , String > = Field :: new ( stringify ! ( name ) , | t | & t . name , | t | & mut t . name , | t , v | { t . name = v ; } ) ; pub const move_multiplier : Field < MovementType , Sext > = Field :: new ( stringify ! ( move_multiplier ) , | t | & t . move_multiplier , | t | & mut t . move_multiplier , | t , v | { t . move_multiplier = v ; } ) ; pub const move_bonus : Field < MovementType , Sext > = Field :: new ( stringify ! ( move_bonus ) , | t | & t . move_bonus , | t | & mut t . move_bonus , | t , v | { t . move_bonus = v ; } ) ; pub const ap_activation_cost : Field < MovementType , i32 > = Field :: new ( stringify ! ( ap_activation_cost ) , | t | & t . ap_activation_cost , | t | & mut t . ap_activation_cost , | t , v | { t . ap_activation_cost = v ; } ) ; pub const stamina_cost : Field < MovementType , Sext > = Field :: new ( stringify ! ( stamina_cost ) , | t | & t . stamina_cost , | t | & mut t . stamina_cost , | t , v | { t . stamina_cost = v ; } ) ; }
impl MovementData { pub const active_movement_type : Field < MovementData , Option < MovementTypeRef > > = Field :: new ( stringify ! ( active_movement_type ) , | t | & t . active_movement_type , | t | & mut t . active_movement_type , | t , v | { t . active_movement_type = v ; } ) ; pub const move_speed : Field < MovementData , Sext > = Field :: new ( stringify ! ( move_speed ) , | t | & t . move_speed , | t | & mut t . move_speed , | t , v | { t . move_speed = v ; } ) ; pub const moves : Field < MovementData , Sext > = Field :: new ( stringify ! ( moves ) , | t | & t . moves , | t | & mut t . moves , | t , v | { t . moves = v ; } ) ; pub const movement_types : Field < MovementData , Vec < Entity > > = Field :: new ( stringify ! ( movement_types ) , | t | & t . movement_types , | t | & mut t . movement_types , | t , v | { t . movement_types = v ; } ) ; }